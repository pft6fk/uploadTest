@using uploadTest.Shared
@inject HttpClient Http
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@if (Files != null)
{
    <b>Results found:</b> @numberFounds
    <br />
    <br />
}
<MudTable Items="@Files" Hover="true" Breakpoint="Breakpoint.Sm" Bordered="true" HorizontalScrollbar="true">
    <ColGroup>
        <col style="width: 50px;"/>
        <col style="width: 80%;"/>
        <col style="width: 20%;"/>
        <col style="width: 15%;"/>
    </ColGroup>
    <HeaderContent>
        <MudTh >ID</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Created date</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd >@if(context.DocDataType.Single().Contains("pdf")) 
            { 
                logo = pdfSVG; 
            }
            @if(context.DocDataType.Single().Contains("document")) 
            { 
                logo = wordSVG; 
            }
            <!--
            @if(context.DocDataType.Single().Contains("xml")) 
            { 
                logo = xmlCSV; 
            }-->
            @if(context.DocDataType.Single().Contains("sheet")) 
            { 
                logo = xlsSVG; 
            }
            @if(context.DocDataType.Single().Contains("text/plain")) 
            { 
                logo = txtSVG; 
            }
            @if(context.DocDataType.Single().Contains("presentation")) 
            { 
                logo = pptxCSV; 
            }
            <MudIcon Icon="@logo"></MudIcon>
        </MudTd>
        <MudTd >
            <b>File path:</b> @* @context.Path*@ <MudHighlighter Text="@context.Path" Style="font-weight: bold; background-color:white;" HighlightedText="@context.DocName.Single()" />
            <br/>
            <b>File name:</b> @context.DocName.Single() 
            <br />
            @if (context.DocSize.Single() / 1024 < 1024)
            {
                <div>
                    <b>File size:</b> @(context.DocSize.Single() / 1024) KB
                </div>
            }
            @if (context.DocSize.Single() / 1024 < 1)
            {
                <div><b>File size:</b> @context.DocSize.Single() B</div>
            }
            @if (context.DocSize.Single() / 1024 >= 1024)
            {
                <div><b>File size:</b> @(context.DocSize.Single() / 1024 / 1024) MB</div>
            }
            <b>File content type:</b> @context.DocDataType.Single() <br />
            @if (@context.DocModifiedDate != null)
            {
            <b>File Modified date:</b> @context.DocModifiedDate.Single() 
            <br />
            }
            else
            {
            }
            @if (@context.DocAuthor != null)
            {
                <b>File author:</b> @context.DocAuthor.Single()
                <br />
            }
            else
            {
            }
            @if(context.DocLanguage != null){
                <b>Language:</b> @context.DocLanguage.Single() <br />
            }
            @if(context.DocPages != null){
                <b>Pages:</b> @context.DocPages.Single() <br />
            }
            <b>ID:</b> @context.Id
            </MudTd>
        
        <MudTd >
            @if (@context.DocCreationDate != null)
            {
                @context.DocCreationDate.Single()
            }
            else
            {
            }
            </MudTd>
        <MudTd >
            <MudIconButton Icon="@Icons.Material.Filled.Download" OnClick="@(() => DownloadFile(context))"></MudIconButton>
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => DeleteFile(context))"></MudIconButton>
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    [Parameter]
    public List<IndexFields> Files { get; set; } 
    [Parameter]
    public int numberFounds { get; set; } 
    string logo = "";
    string wordSVG = "<svg style=\"width:24px;height:24px\" viewBox=\"0 0 24 24\">" 
        +"<path fill=\"currentColor\" d=\"M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M15.2,20H13.8L12,13.2L10.2,20H8.8L6.6,11H8.1L9.5,17.8L11.3,11H12.6L14.4,17.8L15.8,11H17.3L15.2,20M13,9V3.5L18.5,9H13Z\" /> " 
        +"</svg>";
    string pdfSVG = "<svg style=\"width:24px;height:24px\" viewBox=\"0 0 24 24\">" 
        +"<path fill=\"currentColor\" d=\"M19 3H5C3.9 3 3 3.9 3 5V19C3 20.1 3.9 21 5 21H19C20.1 21 21 20.1 21 19V5C21 3.9 20.1 3 19 3M9.5 11.5C9.5 12.3 8.8 13 8 13H7V15H5.5V9H8C8.8 9 9.5 9.7 9.5 10.5V11.5M14.5 13.5C14.5 14.3 13.8 15 13 15H10.5V9H13C13.8 9 14.5 9.7 14.5 10.5V13.5M18.5 10.5H17V11.5H18.5V13H17V15H15.5V9H18.5V10.5M12 10.5H13V13.5H12V10.5M7 10.5H8V11.5H7V10.5Z\" />"
        + "</svg>";
    string xlsSVG = "<svg style=\"width:24px;height:24px\" viewBox=\"0 0 24 24\">"
        +"<path fill=\"currentColor\" d=\"M21.17 3.25Q21.5 3.25 21.76 3.5 22 3.74 22 4.08V19.92Q22 20.26 21.76 20.5 21.5 20.75 21.17 20.75H7.83Q7.5 20.75 7.24 20.5 7 20.26 7 19.92V17H2.83Q2.5 17 2.24 16.76 2 16.5 2 16.17V7.83Q2 7.5 2.24 7.24 2.5 7 2.83 7H7V4.08Q7 3.74 7.24 3.5 7.5 3.25 7.83 3.25M7 13.06L8.18 15.28H9.97L8 12.06L9.93 8.89H8.22L7.13 10.9L7.09 10.96L7.06 11.03Q6.8 10.5 6.5 9.96 6.25 9.43 5.97 8.89H4.16L6.05 12.08L4 15.28H5.78M13.88 19.5V17H8.25V19.5M13.88 15.75V12.63H12V15.75M13.88 11.38V8.25H12V11.38M13.88 7V4.5H8.25V7M20.75 19.5V17H15.13V19.5M20.75 15.75V12.63H15.13V15.75M20.75 11.38V8.25H15.13V11.38M20.75 7V4.5H15.13V7Z\" />"
        +"</svg>";
    string txtSVG = "<svg style=\"width:24px;height:24px\" viewBox=\"0 0 24 24\">"
        +"<path fill=\"currentColor\" d=\"M15,20A1,1 0 0,0 16,19V4H8A1,1 0 0,0 7,5V16H5V5A3,3 0 0,1 8,2H19A3,3 0 0,1 22,5V6H20V5A1,1 0 0,0 19,4A1,1 0 0,0 18,5V9L18,19A3,3 0 0,1 15,22H5A3,3 0 0,1 2,19V18H13A2,2 0 0,0 15,20M9,6H14V8H9V6M9,10H14V12H9V10M9,14H14V16H9V14Z\" />"
        +"</svg>";
    string jsonCSV = "<svg style=\"width:24px;height:24px\" viewBox=\"0 0 24 24\">"
        +"<path fill=\"currentColor\" d=\"M15,20A1,1 0 0,0 16,19V4H8A1,1 0 0,0 7,5V16H5V5A3,3 0 0,1 8,2H19A3,3 0 0,1 22,5V6H20V5A1,1 0 0,0 19,4A1,1 0 0,0 18,5V9L18,19A3,3 0 0,1 15,22H5A3,3 0 0,1 2,19V18H13A2,2 0 0,0 15,20M9,6H14V8H9V6M9,10H14V12H9V10M9,14H14V16H9V14Z\" />"
        +"</svg>";
    string xmlCSV = "<svg style=\"width:24px;height:24px\" viewBox=\"0 0 24 24\">"
        +"<path fill=\"currentColor\" d=\"M19 3H5C3.89 3 3 3.89 3 5V19C3 20.11 3.89 21 5 21H19C20.11 21 21 20.11 21 19V5C21 3.89 20.11 3 19 3M8 15H6.5L6 13L5.5 15H4L4.75 12L4 9H5.5L6 11L6.5 9H8L7.25 12L8 15M15.5 15H14V10.5H13V14H11.5V10.5H10.5V15H9V11C9 9.9 9.9 9 11 9H13.5C14.61 9 15.5 9.9 15.5 11V15M20 15H17V9H18.5V13.5H20V15Z\" />"
        +"</svg>";
    string pptxCSV = "<svg style=\"width:24px;height:24px\" viewBox=\"0 0 24 24\">"
        +"<path fill=\"currentColor\" d=\"M13.25 3.25Q14.46 3.25 15.58 3.56 16.7 3.88 17.67 4.45 18.64 5 19.44 5.81 20.23 6.61 20.8 7.58 21.38 8.55 21.69 9.67 22 10.79 22 12 22 13.21 21.69 14.33 21.38 15.45 20.8 16.42 20.23 17.39 19.44 18.19 18.64 19 17.67 19.55 16.7 20.13 15.58 20.44 14.46 20.75 13.25 20.75 12.18 20.75 11.15 20.5 10.12 20.24 9.2 19.76 8.28 19.27 7.5 18.58 6.69 17.88 6.07 17H2.83Q2.5 17 2.24 16.76 2 16.5 2 16.17V7.83Q2 7.5 2.24 7.25 2.5 7 2.83 7H6.07Q6.69 6.12 7.5 5.42 8.28 4.72 9.2 4.24 10.13 3.76 11.15 3.5 12.18 3.25 13.25 3.25M13.88 4.53V11.37H20.72Q20.6 10 20.03 8.81 19.46 7.62 18.55 6.7 17.64 5.79 16.43 5.22 15.23 4.65 13.88 4.53M9.5 10.84Q9.5 10.27 9.3 9.87 9.11 9.46 8.78 9.21 8.45 8.95 8 8.84 7.55 8.72 7 8.72H4.37V15.27H5.91V13H6.94Q7.42 13 7.87 12.84 8.33 12.7 8.69 12.43 9.05 12.17 9.27 11.76 9.5 11.36 9.5 10.84M13.25 19.5Q14.23 19.5 15.14 19.26 16.04 19 16.85 18.58 17.66 18.13 18.33 17.5 19 16.89 19.5 16.13 20 15.36 20.33 14.47 20.64 13.58 20.72 12.62H12.64V4.53Q11.19 4.65 9.91 5.29 8.63 5.93 7.67 7H11.17Q11.5 7 11.76 7.25 12 7.5 12 7.83V16.17Q12 16.5 11.76 16.76 11.5 17 11.17 17H7.67Q8.2 17.6 8.84 18.06 9.5 18.5 10.19 18.84 10.91 19.17 11.68 19.33 12.45 19.5 13.25 19.5M6.85 10Q7.32 10 7.61 10.19 7.89 10.38 7.89 10.89 7.89 11.11 7.79 11.25 7.69 11.39 7.53 11.5 7.37 11.57 7.18 11.6 7 11.64 6.8 11.64H5.91V10H6.85Z\" />"
        +"</svg>";

    private async Task DeleteFile(IndexFields index)
    {
        var parameters = new DialogParameters { ["index"]=index };
        var dialog = DialogService.Show<DeleteDialog>("Delete file", parameters);
        var result = await dialog.Result;
    }

    private async Task DownloadFile(IndexFields context)
    {
        var response = await Http.GetAsync($"/api/File/Download/{context.Id}");

        var fileStream = response.Content.ReadAsStream();
        using var streamRef = new DotNetStreamReference(stream:fileStream);

        await JS.InvokeVoidAsync("downloadFileFromStream", context.DocName.Single(), streamRef);
    }

}