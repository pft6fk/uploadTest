@inject HttpClient Http
@page "/elasticSearch"
@using CommonServiceLocator
@using Newtonsoft.Json
@using SolrNet
@using uploadTest.Shared

<FileUpload/>

<!--Search input--> 

<MudTextField @bind-Value="search.Text" 
                Label="Search" 
                Variant="Variant.Outlined" 
                Adornment="Adornment.End" 
                AdornmentIcon="@Icons.Filled.Search" 
                OnAdornmentClick="Query"
                AdornmentColor="Color.Secondary" /> 
<!--
<EditForm OnSubmit="Query" Model="search">
    <input @bind-value="search.Text" placeholder="some text"/> 
    <button type="submit">Submit</button>
</EditForm> 
--><br />

@*File Browser*@
<TableView Files="indexFields"/>

@if(indexFields != null)
{
    foreach (var item in indexFields)
    {
        <br />

        <b>Id = </b> @item.Id<br />
        <b>Path = </b> @item.Path <br/>
        <b>File Name = </b> @item.DocName.Single() <br />
        if (item.DocCreationDate != null)
        {
            <b>File Created Date = </b> 
            @item.DocCreationDate.Single() 
            <br/>
        }
        if(item.DocModifiedDate != null)
        {
            <b>File Modified = </b>
            @item.DocModifiedDate.Single()
            <br />
        }
        if(item.DocAuthor != null)
        {
            <b>File Author = </b> 
            @item.DocAuthor.Single() 
            <br/>
        }
        if (item.DocDataType != null)
        {
            <b>File Data Type = </b> 
            @item.DocDataType.Single() 
            <br/>
        }
        if (item.DocPages != null)
        {
            <b>File Pages = </b> 
            @item.DocPages.Single() 
            <br/>
        }
        if (item.DocLanguage != null)
        {
            <b>File Language = </b> 
            @item.DocLanguage.Single() 
            <br/>
        }
        if (item.DocSize != null)
        {
            <b>File Size (bytes) = </b> 
            @item.DocSize.Single() 
            <br/>
        }
        @*<b>File Content = </b> @item.DocContent.Single() <br/>*@


    }
}

@code {
    public Search1 search = new Search1();
    public string Search { get; set; } = "";
    private string q = "*:*";
    public double? Amount { get; set; }
    public int? Weight { get; set; }
    private bool Clearing = false;
    public List<IndexFields>? indexFields = null;
    public async void Query()
    {
        q = search.Text;
        var response = await Http.GetFromJsonAsync<List<IndexFields>>($"api/File/Query/{q}");
        indexFields = response;
        StateHasChanged();
    }
       
}