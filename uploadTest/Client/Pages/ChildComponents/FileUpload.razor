
@using System.Net.Http.Headers
@using uploadTest.Shared
@inject ISnackbar Snackbar
@inject HttpClient Http
@*
<MudSelect @bind-Value="enumType" Label="Select upload options" OpenIcon="@Icons.Material.Filled.FileUpload" AdornmentColor="Color.Primary">
    @foreach (UploadType item in Enum.GetValues(typeof(UploadType)))
    {
        <MudSelectItem Value="@item">@item</MudSelectItem>
    }
</MudSelect>
<br />
*@
<MudPaper @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass" Height="300px" Outlined="true" Class="@DragClass">
    @if (!Clearing)
    {
        <InputFile OnChange="OnInputFileChanged" multiple class="absolute mud-width-full mud-height-full overflow-hidden z-2" style="opacity:0;" />
    }
    <MudText Typo="Typo.h6">Drag and drop files here or click</MudText>
    @foreach (var file in fileNames)
    {
        <MudChip Color="Color.Dark" Text="@file" />
    }
</MudPaper>
<MudToolBar DisableGutters="true" Class="gap-2">
    <MudButton OnClick="Upload" Disabled="@(!fileNames.Any())" Color="Color.Primary" Variant="Variant.Filled">Upload</MudButton>
    <MudButton OnClick="Clear" Disabled="@(!fileNames.Any())" Color="Color.Error" Variant="Variant.Filled">Clear</MudButton>
</MudToolBar>


@code {
    private bool Clearing = false;
    private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private string DragClass = DefaultDragClass;
    private List<string> fileNames = new List<string>();
    private UploadType enumType { get; set; } = UploadType.RichFile;
    public enum UploadType { RichFile, Excel, CSV }
    private long maxFileSize = long.MaxValue;
    private List<UploadResult> uploadResults = new List<UploadResult>();
    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {

        using var content = new MultipartFormDataContent();
        ClearDragClass();

        var files = e.GetMultipleFiles();
        foreach (var file in files)
        {
            var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

            fileNames.Add(file.Name);

            content.Add(
                content: fileContent,
                name: "\"files\"",
                fileName: file.Name
            );

        }

        var response = await Http.PostAsync("/api/File", content);
        var newUploadResults = await response.Content.ReadFromJsonAsync<List<UploadResult>>();

        if (newUploadResults is not null)
        {
            uploadResults = uploadResults.Concat(newUploadResults).ToList();
        }
    }

    //to clear uploaded files
    private async Task Clear()
    {
        Clearing = true;
        fileNames.Clear();
        ClearDragClass();
        await Task.Delay(100);
        Clearing = false;
    }

    private async Task Upload()
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add("Files has been uploaded successfully!", Severity.Normal);
        Clear();
    }

    private void SetDragClass()
    {
        DragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        DragClass = DefaultDragClass;
    }
}